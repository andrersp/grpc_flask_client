# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_client.messages.movies_pb2 as movies__pb2


class MoviesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMovies = channel.unary_unary(
            '/MoviesService/GetMovies',
            request_serializer=movies__pb2.GetMoviesParam.SerializeToString,
            response_deserializer=movies__pb2.MoviesList.FromString,
        )
        self.GetMovie = channel.unary_unary(
            '/MoviesService/GetMovie',
            request_serializer=movies__pb2.MovieId.SerializeToString,
            response_deserializer=movies__pb2.Movies.FromString,
        )
        self.UpdateMovies = channel.unary_unary(
            '/MoviesService/UpdateMovies',
            request_serializer=movies__pb2.Data.SerializeToString,
            response_deserializer=movies__pb2.MessageResponse.FromString,
        )


class MoviesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MoviesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetMovies': grpc.unary_unary_rpc_method_handler(
            servicer.GetMovies,
            request_deserializer=movies__pb2.GetMoviesParam.FromString,
            response_serializer=movies__pb2.MoviesList.SerializeToString,
        ),
        'GetMovie': grpc.unary_unary_rpc_method_handler(
            servicer.GetMovie,
            request_deserializer=movies__pb2.MovieId.FromString,
            response_serializer=movies__pb2.Movies.SerializeToString,
        ),
        'UpdateMovies': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateMovies,
            request_deserializer=movies__pb2.Data.FromString,
            response_serializer=movies__pb2.MessageResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'MoviesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class MoviesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMovies(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MoviesService/GetMovies',
                                             movies__pb2.GetMoviesParam.SerializeToString,
                                             movies__pb2.MoviesList.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMovie(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MoviesService/GetMovie',
                                             movies__pb2.MovieId.SerializeToString,
                                             movies__pb2.Movies.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMovies(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MoviesService/UpdateMovies',
                                             movies__pb2.Data.SerializeToString,
                                             movies__pb2.MessageResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
